import numpy as np
from collections import Counter

class KNN:
    def __init__(self, k=3):
        self.k = k
        
    def fit(self, X, y):
        self.X_train = X
        self.y_train = y
        
    def euclidean_distance(self, x1, x2):
        return np.sqrt(np.sum((x1 - x2)**2))
    
    def predict(self, X):
        predictions = [self._predict(x) for x in X]
        return np.array(predictions)
    
    def _predict(self, x):
        # Compute distances between x and all examples in the training set
        distances = [self.euclidean_distance(x, x_train) for x_train in self.X_train]
        # Sort by distance and return indices of the first k neighbors
        k_indices = np.argsort(distances)[:self.k]
        # Extract the labels of the k nearest neighbor training samples
        k_nearest_labels = [self.y_train[i] for i in k_indices]
        # Return the most common class label
        most_common = Counter(k_nearest_labels).most_common(1)
        return most_common[0][0]

# Example usage:
if __name__ == "__main__":
    # Sample dataset
    X_train = np.array([[1,2], [1.5,1.8], [5,8], [8,8], [1, 0.6], [9,11]])
    y_train = np.array([0, 0, 1, 1, 0, 1])
    
    # Initialize and fit KNN classifier
    clf = KNN(k=3)
    clf.fit(X_train, y_train)
    
    # Test data
    X_test = np.array([[5,5], [3,2], [1,1]])
    y_test = np.array([1, 0, 0])
    
    # Predict
    predictions = clf.predict(X_test)
    
    # Calculate accuracy
    accuracy = np.mean(predictions == y_test)
    print(f"Accuracy: {accuracy * 100}%")
